{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              "tomasaschan/advent-of-code"
license:             BSD-3-Clause
author:              "Tomas Aschan"
maintainer:          "1550920+tomasaschan@users.noreply.github.com"
copyright:           "Tomas Aschan"

dependencies:
- base >= 4.7 && < 5

ghc-options:
- -Wall
- -Wcompat
- -Widentities
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wmissing-export-lists
- -Wmissing-home-modules
- -Wpartial-fields
- -Wredundant-constraints

library:
  source-dirs: src
  dependencies:
  - helpers

executables:
  {{name}}-run:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - helpers

tests:
  {{ name }}-tests:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - helpers
    - test-helpers
    - hspec

default-extensions:
- OverloadedStrings

{-# START_FILE Setup.hs #-}
import Distribution.Simple

main = defaultMain

{-# START_FILE src/Lib.hs #-}
module Lib (
    solve,
) where

solve :: String -> (String, String)
solve input = (a, b)
  where
    a = input
    b = ""

{-# START_FILE app/Main.hs #-}
module Main (main) where

import Lib

main :: IO ()
main = do
  input <- getContents
  let (a,b) = solve input
  putStrLn $ "a: " <> a
  putStrLn $ "b: " <> b

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/LibSpec.hs #-}
module LibSpec (spec) where

import Lib
import Test.Hspec
import Test.Helpers

spec :: Spec
spec = describe "{{ name }}" $ do
  describeInput "example" "00-example.txt" solve $ do
    it "should solve a" $ \(a, _) -> do
      a `shouldBe` "0"

    it "should solve b" $ \(_, b) -> do
      b `shouldBe` "0"

  describeInput "real input" "00.txt" solve $ do
    it "should solve a" $ \(a, _) -> do
      a `shouldBe` "0"
